import { Observable } from 'rxjs';
import * as firebase from 'firebase';

export const TimeStamp = firebase.database.ServerValue.TIMESTAMP;
/* ####################################################################################################################
 * DBからのデータとそれ以外をまとめた、データの復元に必要な情報一式
 * ################################################################################################################# */
export class DbData {
    constructor( public readonly keys: any, public readonly values: any ) {
    }
}

/* ####################################################################################################################
 * DBからのデータとそれ以外をまとめた、データの復元に必要な情報一式
 * ################################################################################################################# */
export interface Mapper<T> {
    getDb( keys?: any ): Observable<T>;
}

export interface GroupMapper<T> extends Mapper<T>{
    getAllDb( keys?: any ): Observable<T[]>;
}

/* ####################################################################################################################
 * Path: URLを作るための情報
 * あまり効率の良いコードではないが、頻度と規模が小さいので作りやすさ重視する。
 * ################################################################################################################# */

export class Path {
    private paramIndex: { [key:string]: number } = {};
    
    /* --------------------------------------------------------------------------------------------
     * url(文字列）からPathを作る
     * ----------------------------------------------------------------------------------------- */
    static fromUrl( url: string ) {
        return new Path( url.split( '/' ) );
    }
    /* --------------------------------------------------------------------------------------------
     * コンストラクタ
     * ----------------------------------------------------------------------------------------- */
    constructor( private keys: string[] ) {
        this.keys.forEach( ( key, index ) => {
            // パラメータの場合
            if( key[0] === '$' ) {
                let body = key.substring( 1, key.length );
                this.paramIndex[ body ] = index;
            }
        } );

    }
    
    /* --------------------------------------------------------------------------------------------
     * url(文字列）に変換
     * ----------------------------------------------------------------------------------------- */
    toUrl( param?: any ): string {
        let result: string = '';
        if( this.paramIndex && param ) {
            let tmp = this.keys.concat( [] );

            for( let key in this.paramIndex ) {
                if( param[ key ] ) {
                    tmp[ this.paramIndex[ key ] ] = param[ key ];
                }
            }
        } else {
            result = this.keys.join( '/' );
        }
        return result;
    } 

    /* --------------------------------------------------------------------------------------------
     * 複製
     * ----------------------------------------------------------------------------------------- */
    clone(): Path {
        return new Path( this.keys );
    }

    /* --------------------------------------------------------------------------------------------
     * 連結（一つずつ）
     * ----------------------------------------------------------------------------------------- */
    concat( path: Path ): Path {
        return new Path( this.keys.concat( path.keys ) );
    }
}